(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[143],{5683:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/front-end/testing/best-practices",function(){return n(3049)}])},3049:function(e,t,n){"use strict";n.r(t),n.d(t,{__toc:function(){return d}});var s=n(3860),r=n(2836),o=n(7385),i=n(3834);n(5524);var a=n(4709);let d=[{depth:2,value:"Storybook",id:"storybook"},{depth:3,value:"Use typed stories",id:"use-typed-stories"},{depth:2,value:"Tests",id:"tests"},{depth:3,value:"Prefer using methods from React Testing Library not from Jest",id:"prefer-using-methods-from-react-testing-library-not-from-jest"},{depth:3,value:"Avoid querying of testing elements by data-testid or any other attributes invisible to user",id:"avoid-querying-of-testing-elements-by-data-testid-or-any-other-attributes-invisible-to-user"},{depth:3,value:"For asynchronously loaded items, use the async methods from Testing Library",id:"for-asynchronously-loaded-items-use-the-async-methods-from-testing-library"}];function _createMdxContent(e){let t=Object.assign({h1:"h1",p:"p",h2:"h2",h3:"h3",code:"code",a:"a"},(0,a.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{children:"Best practices"}),"\n",(0,s.jsx)(t.p,{children:"This section contains useful tips for applying the testing techniques described in this chapter."}),"\n",(0,s.jsx)(t.h2,{id:"storybook",children:"Storybook"}),"\n",(0,s.jsx)(t.h3,{id:"use-typed-stories",children:"Use typed stories"}),"\n",(0,s.jsxs)(t.p,{children:[':::{code-block} typescript\n:linenos:\n:caption: "✅ Inherit default export & each story from ',(0,s.jsx)(t.code,{children:"Meta"})," type from ",(0,s.jsx)(t.code,{children:"@storybook/react"}),"\"\nimport { Meta } from '@storybook/react';"]}),"\n",(0,s.jsx)(t.p,{children:"export default {\ntitle: 'Pages/ActiveProperties/ActivePropertiesFilters',\ncomponent: ActivePropertiesFilters,\ndecorators: [\nwithApi([\nApiMock['/api/acquire/companytitles'],\nApiMock['/api/acquire/users'],\n]),\n],\n} as Meta;"}),"\n",(0,s.jsx)(t.p,{children:"export const ActivePropertiesDefault: Meta = {\nargs: { ...defaultArgs },\n};\n:::"}),"\n",(0,s.jsx)(t.p,{children:"Using typed stories will allow you to use the full power of the Typescript inside the Storybook. In particular, it will help you find typos."}),"\n",(0,s.jsx)(t.h2,{id:"tests",children:"Tests"}),"\n",(0,s.jsxs)(t.p,{children:[":::{note}\nFirst of all please check this great guide from Kent C. Odds ",(0,s.jsx)(t.a,{href:"https://kentcdodds.com/blog/common-mistakes-with-react-testing-library",children:"Common mistakes with React Testing Library"}),"\n:::"]}),"\n",(0,s.jsx)(t.h3,{id:"prefer-using-methods-from-react-testing-library-not-from-jest",children:"Prefer using methods from React Testing Library not from Jest"}),"\n",(0,s.jsxs)(t.p,{children:[":::{code-block} typescript\n:caption: \"❌ Not: use jest methods for direct access DOM nodes\"\nconst myElement = screen.getByTestId('my-element');\nconst [anchorTag] = myElement.getElementsByTagName('a');\nexpect(anchorTag?.getAttribute('href')).toBe('",(0,s.jsx)(t.a,{href:"https://www.expected.com",children:"https://www.expected.com"}),"');\n:::"]}),"\n",(0,s.jsxs)(t.p,{children:[':::{code-block} typescript\n:caption: "✅ Prefer to use methods from ',(0,s.jsx)(t.code,{children:"React Testing Library"}),"\"\nconst anchorTag = screen.getByText('Expected text');\nexpect(myElement).toBeInTheDocument();\n:::"]}),"\n",(0,s.jsxs)(t.p,{children:["The Testing Library offers more advanced methods for finding elements that are resistant to changes in markup. Check this ",(0,s.jsx)(t.a,{href:"https://github.com/testing-library/eslint-plugin-testing-library/blob/main/docs/rules/no-node-access.md",children:"ESLint rule"})]}),"\n",(0,s.jsx)(t.h3,{id:"avoid-querying-of-testing-elements-by-data-testid-or-any-other-attributes-invisible-to-user",children:"Avoid querying of testing elements by data-testid or any other attributes invisible to user"}),"\n",(0,s.jsx)(t.p,{children:":::{code-block} typescript\n:caption: \"❌ Not: use data-testid attributes to find an element\"\nconst myElement = screen.getByTestId('my-element');\nexpect(myElement).toHaveTextContent('Expected text');\n:::"}),"\n",(0,s.jsx)(t.p,{children:":::{code-block} typescript\n:caption: \"✅ Prefer to find by displayed text or label\"\nconst myElement = screen.getByText('Expected text');\nexpect(myElement).toBeInTheDocument();\n:::"}),"\n",(0,s.jsxs)(t.p,{children:["Based on the ",(0,s.jsx)(t.a,{href:"https://testing-library.com/docs/queries/about/#priority",children:"Guiding Principles"}),", your test should resemble how users interact with your code (component, page, etc.) as much as possible."]}),"\n",(0,s.jsxs)(t.h3,{id:"for-asynchronously-loaded-items-use-the-async-methods-from-testing-library",children:["For asynchronously loaded items, use the async methods from ",(0,s.jsx)(t.code,{children:"Testing Library"})]}),"\n",(0,s.jsx)(t.p,{children:":::{code-block} typescript\n:caption: \"❌ Not: use synchronous methods when dealing with data loaded asynchronously\"\nconst myAsyncElement = screen.getByText('Expected text');\nexpect(myAsyncElement).toBeInTheDocument();\n:::"}),"\n",(0,s.jsx)(t.p,{children:":::{code-block} typescript\n:caption: \"✅ Await asynchronous findBy* methods to avoid the races between test assert and data loading\"\nconst myAsyncElement = await screen.findByText('Expected text');\nexpect(myAsyncElement).toBeInTheDocument();\n:::"}),"\n",(0,s.jsx)(t.p,{children:'Suppose that the element "Expected text" appears on the screen with a delay after loading data from the mocked REST Api. Even a small delay in this case will be enough for the synchronous test to start behaving unpredictably - sometimes to find the element and sometimes not.'})]})}let c={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,a.a)(),e.components);return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/front-end/testing/best-practices.md",route:"/front-end/testing/best-practices",pageMap:[{kind:"Meta",data:{"front-end":{title:"Front End"},about:{title:"About",type:"page"},contact:{title:"Contact ↗",type:"page",href:"https://twitter.com/shuding_",newWindow:!0},advanced:"Advanced",another:"Another",index:"Index"}},{kind:"MdxPage",name:"about",route:"/about"},{kind:"MdxPage",name:"advanced",route:"/advanced"},{kind:"MdxPage",name:"another",route:"/another"},{kind:"Folder",name:"front-end",route:"/front-end",children:[{kind:"Meta",data:{css:{title:"Css",theme:{typesetting:"article"}},react:{title:"React",theme:{typesetting:"article"}},links:"Links",plugins:"Plugins"}},{kind:"Folder",name:"css",route:"/front-end/css",children:[{kind:"MdxPage",name:"stylesheets",route:"/front-end/css/stylesheets"},{kind:"MdxPage",name:"tailwind-css",route:"/front-end/css/tailwind-css"},{kind:"MdxPage",name:"theme",route:"/front-end/css/theme"},{kind:"Meta",data:{stylesheets:"Stylesheets","tailwind-css":"Tailwind CSS",theme:"Theme"}}]},{kind:"MdxPage",name:"css",route:"/front-end/css"},{kind:"Folder",name:"data",route:"/front-end/data",children:[{kind:"Folder",name:"easy-peasy",route:"/front-end/data/easy-peasy",children:[{kind:"MdxPage",name:"best-practices",route:"/front-end/data/easy-peasy/best-practices"},{kind:"MdxPage",name:"data-storing",route:"/front-end/data/easy-peasy/data-storing"},{kind:"MdxPage",name:"index",route:"/front-end/data/easy-peasy"},{kind:"Meta",data:{"best-practices":"Best Practices","data-storing":"Data Storing",index:"Index"}}]},{kind:"MdxPage",name:"index",route:"/front-end/data"},{kind:"Folder",name:"react-query",route:"/front-end/data/react-query",children:[{kind:"MdxPage",name:"data-fetching",route:"/front-end/data/react-query/data-fetching"},{kind:"MdxPage",name:"index",route:"/front-end/data/react-query"},{kind:"MdxPage",name:"optimistic-updates",route:"/front-end/data/react-query/optimistic-updates"},{kind:"Meta",data:{"data-fetching":"Data Fetching",index:"Index","optimistic-updates":"Optimistic Updates"}}]},{kind:"Meta",data:{index:"Index"}}]},{kind:"Folder",name:"forms",route:"/front-end/forms",children:[{kind:"MdxPage",name:"custom-components",route:"/front-end/forms/custom-components"},{kind:"MdxPage",name:"index",route:"/front-end/forms"},{kind:"MdxPage",name:"validation",route:"/front-end/forms/validation"},{kind:"MdxPage",name:"writing-forms",route:"/front-end/forms/writing-forms"},{kind:"Meta",data:{"custom-components":"Custom Components",index:"Index",validation:"Validation","writing-forms":"Writing Forms"}}]},{kind:"MdxPage",name:"links",route:"/front-end/links"},{kind:"Folder",name:"overview",route:"/front-end/overview",children:[{kind:"MdxPage",name:"best-practices",route:"/front-end/overview/best-practices"},{kind:"MdxPage",name:"folder-structure",route:"/front-end/overview/folder-structure"},{kind:"MdxPage",name:"project-setup",route:"/front-end/overview/project-setup"},{kind:"Meta",data:{"best-practices":"Best Practices","folder-structure":"Folder Structure","project-setup":"Project Setup"}}]},{kind:"MdxPage",name:"plugins",route:"/front-end/plugins"},{kind:"Folder",name:"react",route:"/front-end/react",children:[{kind:"Meta",data:{index:"Introduction","best-practices":"Best Practices"}},{kind:"MdxPage",name:"best-practices",route:"/front-end/react/best-practices"},{kind:"MdxPage",name:"index",route:"/front-end/react"}]},{kind:"Folder",name:"testing",route:"/front-end/testing",children:[{kind:"MdxPage",name:"best-practices",route:"/front-end/testing/best-practices"},{kind:"MdxPage",name:"coverage",route:"/front-end/testing/coverage"},{kind:"MdxPage",name:"index",route:"/front-end/testing"},{kind:"MdxPage",name:"links",route:"/front-end/testing/links"},{kind:"MdxPage",name:"mocks",route:"/front-end/testing/mocks"},{kind:"MdxPage",name:"snapshots",route:"/front-end/testing/snapshots"},{kind:"MdxPage",name:"stories",route:"/front-end/testing/stories"},{kind:"MdxPage",name:"storybook",route:"/front-end/testing/storybook"},{kind:"MdxPage",name:"writing-tests",route:"/front-end/testing/writing-tests"},{kind:"Meta",data:{"best-practices":"Best Practices",coverage:"Coverage",index:"Index",links:"Links",mocks:"Mocks",snapshots:"Snapshots",stories:"Stories",storybook:"Storybook","writing-tests":"Writing Tests"}}]},{kind:"Folder",name:"typescript",route:"/front-end/typescript",children:[{kind:"MdxPage",name:"best-practices",route:"/front-end/typescript/best-practices"},{kind:"MdxPage",name:"index",route:"/front-end/typescript"},{kind:"Meta",data:{"best-practices":"Best Practices",index:"Index"}}]}]},{kind:"MdxPage",name:"front-end",route:"/front-end"},{kind:"MdxPage",name:"index",route:"/"}],flexsearch:{codeblocks:!0},title:"Best practices",headings:d},pageNextRoute:"/front-end/testing/best-practices",nextraLayout:o.ZP,themeConfig:i.Z};t.default=(0,r.j)(c)},3834:function(e,t,n){"use strict";var s=n(3860);n(1733);let r={logo:(0,s.jsx)("span",{children:"My Project"}),project:{link:"https://github.com/shuding/nextra-docs-template"},chat:{link:"https://discord.com"},docsRepositoryBase:"https://github.com/shuding/nextra-docs-template",footer:{text:"Nextra Docs Template"}};t.Z=r}},function(e){e.O(0,[774,37,888,179],function(){return e(e.s=5683)}),_N_E=e.O()}]);